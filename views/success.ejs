<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Welcome to HubSpot</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        text-align: center;
        background-color: #f2f2f2;
        padding: 20px;
      }

      h1 {
        color: #007bff; /* Blue text color */
        font-size: 24px; /* Larger font size */
      }

      a.button {
        display: inline-block;
        text-decoration: none;
        background-color: #007bff; /* Blue button color */
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        margin-top: 20px; /* Slightly increased margin */
      }

      table {
        width: 80%;
        margin: 20px auto; /* Center the table horizontally */
        border-collapse: collapse;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Add a subtle shadow */
      }

      table th,
      table td {
        padding: 10px 15px;
        text-align: left;
        border: 1px solid #ddd;
      }

      table th {
        background-color: #007bff; /* Blue header background */
        color: #fff;
      }

      table tr:nth-child(even) {
        background-color: #f5f5f5; /* Alternate row background color */
      }

      button {
        padding: 10px 20px;
        background-color: #007bff; /* Blue button color */
        color: #fff;
        border: none;
        border-radius: 50px;
        cursor: pointer;
        font-weight: bold; /* Increased font weight */
        margin-top: 20px; /* Adjusted margin */
        display: block; /* Makes the button full width */
        width: 100%; /* Makes the button full width */
      }

      .icon {
        font-size: 18px; /* Icon size */
        margin: 0 10px; /* Spacing around icons */
        cursor: pointer;
      }

      .edit-icon {
        color: #007bff; /* Blue edit icon color */
      }

      .delete-icon {
        color: #ff0000; /* Red delete icon color */
      }
    </style>
  </head>
  <body>
    <h1>
      Hi <%= firstname %>, your ID has been received by HubSpot. Welcome aboard.
    </h1>
    <h2>Please Check your response below</h2>
    <table>
      <thead>
        <tr>
          <th>User ID</th>
          <th>First Name</th>
          <th>Last Name</th>
          <th>Email</th>
          <th>Phone</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <% arr.forEach(item => { %>
        <tr data-userid="<%= item.hs_object_id %>">
          <td><%= item.hs_object_id %></td>
          <td><%= item.firstname %></td>
          <td><%= item.lastname %></td>
          <td><%= item.email %></td>
          <td><%= item.phone %></td>
          <td>
            <span class="icon edit-icon" onclick="makeEditable(this)">‚úèÔ∏è</span>
            <span
              class="icon delete-icon"
              onclick="confirmDelete('<%= item.hs_object_id %>')"
              >üóëÔ∏è</span
            >
          </td>
        </tr>
        <% }); %>
      </tbody>
    </table>
    <a href="<%= hostUrl %>" class="button">Home</a>
    <script>
      const deletContact = (contactId) => {
        var requestOptions = {
          method: "DELETE",
          redirect: "follow",
        };

        fetch(`http://localhost:9000/deleteContact/${contactId}`, requestOptions)
          .then((response) => response.text())
          .then((result) => console.log(result))
          .catch((error) => console.log("error", error));
      };

      const editContact = (contactId, userObject) => {
        const { firstname, lastname, email, phone } = userObject;
        let myHeaders = new Headers();
        myHeaders.append("Content-Type", "application/json");

        let raw = JSON.stringify({
          properties: {
            email,
            firstname,
            lastname,
            phone,
          },
        });

        let requestOptions = {
          method: "PATCH",
          headers: myHeaders,
          body: raw,
          redirect: "follow",
        };
        fetch("http://localhost:9000/editContact/11051", requestOptions)
          .then((response) => response.text())
          .then((result) => console.log(result))
          .catch((error) => console.log("error", error));
      };
      function makeEditable(icon) {
        const row = icon.closest("tr");
        const editIcon = row.querySelector(".edit-icon");
        const deleteIcon = row.querySelector(".delete-icon");
        const cells = row.querySelectorAll("td");

        if (editIcon.innerText === "‚úèÔ∏è") {
          // Enter edit mode
          cells.forEach((cell, index) => {
            if (index !== 0 && index !== cells.length - 1) {
              const text = cell.textContent;
              const input = document.createElement("input");
              input.value = text;
              cell.textContent = "";
              cell.appendChild(input);
            }
          });

          editIcon.innerText = "save"; // Change icon to Save
        } else {
          // Exit edit mode
          cells.forEach((cell, index) => {
            if (index !== 0 && index !== cells.length - 1) {
              const input = cell.querySelector("input");
              const text = input?.value;
              cell.textContent = text;
            }
          });

          editIcon.innerText = "‚úèÔ∏è"; // Change icon back to Edit
          deleteIcon.innerText = "üóëÔ∏è"; // Change icon back to delete
          editContact(cells[0].innerText, {
            firstname: cells[1].innerText,
            lastname: cells[2].innerText,
            email: cells[3].innerText,
            phone: cells[4].innerText,
          });
        }
      }

      function confirmDelete(userId) {
        const confirmation = window.confirm(
          "Are you sure you want to delete this user?"
        );
        console.log(userId);
        if (confirmation) {
          // User confirmed the delete action, proceed with the deletion
          deleteEntry(userId);
        }
      }

      function deleteEntry(userId) {
        // Find the row associated with the user ID
        console.log("testin-1");
        const rowToDelete = document.querySelector(
          `tr[data-userid="${userId}"]`
        );
        if (rowToDelete) {
          // Remove the row from the table
          rowToDelete.remove();
          // Implement the delete functionality here using userId if needed
          console.log(`Delete user with ID: ${userId}`);
          deletContact(userId)
        }
      }
    </script>
  </body>
</html>
